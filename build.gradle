buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

plugins {
    id 'application'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'findbugs'
    id 'pmd'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.0.1'
    id 'com.jfrog.bintray' version '1.0'
}

version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'com.pi4j', name: 'pi4j-core', version: '0.0.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
    compile group: 'args4j', name: 'args4j', version: '2.0.29'
}

def pomConfig = {
    inceptionYear '2014'
    licenses {
        license {
            name "The MIT License (MIT)"
            url "https://github.com/stefanfreitag/SHT21/blob/master/LICENSE"
            distribution "repo"
        }
    }

    scm {
            url 'scm:git:https://github.com/stefanfreitag/SHT21'
            connection 'scm:git:https://github.com/stefanfreitag/SHT21'
            developerConnection 'scm:git:https://github.com/stefanfreitag/SHT21'
    }
    developers {
        developer {
            id "sfreitag"
            name "Stefan Freitag"
            email "stefan@stefreitag.de"
            timezone "Europe/Berlin"
            roles {
                role "developer"
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            artifact distZip

            groupId 'de.freitag.stefan'
            pom.withXml {
                def root = asNode()
                    root.appendNode('description', '')
                    root.children().last() + pomConfig
            }
        }
    }
}

bintrayUpload.dependsOn(build)


bintray {
    if (!project.hasProperty('bintray_user')) {
        project.ext.bintray_user = 'default'
    }
    if (!project.hasProperty('bintray_api_key')) {
        project.ext.bintray_api_key = 'default'
    }

    user = "$bintray_user"
    key = "$bintray_api_key"

    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'SHT21'
        desc = ''
        websiteUrl = 'https://github.com/stefanfreitag/SHT21'
        issueTrackerUrl = 'https://github.com/stefanfreitag/SHT21/issues'
        vcsUrl = 'git://github.com/stefanfreitag/SHT21.git'
        licenses = ['MIT']
        labels = ['Java', 'SHT21']
        publicDownloadNumbers = true
	version {
            name = '1.0'
            vcsTag = '1.0'
            gpg {
              sign = true
              passphrase = project.hasProperty('gpg_passphrase') ? gpg_passphrase :  ''
            }
        }

    }
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

jar {
    mainClassName = "demo.SHT21Demo"
    manifest {
        attributes 'Implementation-Title': 'SHT21 Library', 'Implementation-Version': version
    }
}


startScripts {
    classpath += files('src/dist/bin/')

    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\bin', '%APP_HOME%\\bin')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/bin', '$APP_HOME/bin')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

findbugs {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            "java-basic",
            "java-braces"
    ]
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

